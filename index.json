[{"authors":null,"categories":["R"],"content":"\rThere’s a problem with the various versions of the oft-heard-in-intro-stats-courses phrase “correlation does not imply causation.” It gives early statistics students the wrong impressions.\nThe idea seems simple: Just because there is statistical correlation in the data present does not mean that that there is a real world causal relationship (a complicated term, it turns out) between x and y. You know, x could have a high correlation with y but actually, w is simply a mutual cause of x and y. Or something like that.\nThe phrase is problematic because it’s actually not accurate.\n1.) The first problem is that the only thing that may indicate a causal relationship statistically is correlation. The more accurate phrase might be something like, “correlation does not necessarily imply causation”\n2.) The next problem is that, paradoxically, the phrase does not go far enough. Correlaion present in data does not even indicate a real world relationship, let alone a causal one!\nPoint 2 can be demonstrated. We’ll generate completely random distributions and then correlate them. Then we’ll do this over and over and look at how the correlations values vary.\nCorrelating the Uncorrelated\rLet’s start by generating two random normal distributions of size 20, \\(\\mu\\) is 0, \\(\\sigma\\) is 1.\nset.seed(123)\rdist1 \u0026lt;- rnorm(20)\rdist2 \u0026lt;- rnorm(20)\rThese two distributions, aside from being generated on my computer, have nothing to do with each other and represent nothing in the real world. If you have no interest in the R code, that’s fine, just pay attention to the fact that we’re working with random distributions that have no real world relationship.\nWe can correlate them.\ncor(dist1, dist2)\r## [1] -0.09172278\rThe Correlation is -.09, not very large.\nLet’s do this again.\nset.seed(9201989)\rdista \u0026lt;- rnorm(20)\rdistb \u0026lt;- rnorm(20)\rcor(dista, distb)\r## [1] -0.3213314\rHm, -.32, we’re starting to get somewhere. But they’re random numbers. Let’s say we do this over and over again and graph the correlation coefficients. I created a function to do this as an exhibit.\nIt takes as input, the number of times to replicate creating the distribrutions of size samples and a particular correlation value, or cor.cutoff. The function returns the number of times a correlation value above this cutoff (cor.cutoff) is returned.\nThe code is below. It returns a list. Element 1 is the number of times a correlation value at least as large as cor.cutoff is returned. Element 2 is a line plot of correlation coefficients. Each replication returns one correlation coefficient. And the third element in the returned list is a dataframe containing each correlation coefficient for each replication.\nlibrary(ggplot2)\rtotfunc \u0026lt;- function(reps, samples, cor.cutoff){\rrandom \u0026lt;- function(samples){\rdist1 \u0026lt;- rnorm(samples, 0, 1)\rdist2 \u0026lt;- rnorm(samples, 0, 1)\rdistab \u0026lt;- as.data.frame(cbind(dist1, dist2))\rx1 \u0026lt;- cor(dist1, dist2)}\rtest1 \u0026lt;-replicate(reps, random(samples))\rtest2 \u0026lt;- as.data.frame(cbind(test1, c(1:reps)))\rcorpl \u0026lt;- ggplot(data = test2, aes(x=V2, y = test1)) + geom_line() + xlab(\u0026quot;Replication Number\u0026quot;) + ylab(\u0026quot;Pearson\u0026#39;s Correlation Coeffient Value\u0026quot;)\rx2 \u0026lt;- sum(test2$test1 \u0026gt;= cor.cutoff)\rcorpl\rplotsr \u0026lt;- list(x2, corpl, test2)\rreturn(plotsr)\r} \rLet’s see how this works. We’ll start with distributions of size 20 and correlate them. We’ll repeat this process 1000 times. we want to know how many correlation coefficients above the absolute value of .6 exist.\nset.seed(23)\rtesttot \u0026lt;- totfunc(1000, 20, abs(.6))\rTo see the plot of correlation coefficients:\ntesttot[[2]]\rNot the pretties, but you get the idea. Correlation values are all over the place. How many times does the correlation value exceed the absolute value of .6?\ntesttot[[1]]\r## [1] 5\rYep, 5 times. That’s fairly impressive. We were able to generate two random distributions, and depending on the sample, got correlation values that exceeded .6.\nIf you want to understand why a correlation coefficient doesn’t necessarily describe a real world relationship, this is why!\nAnd if you want to play with some other numbers, say, with random distributions of size 1000 and do it a thousand times, we can.\ntest2 \u0026lt;- totfunc(1000, 1000, abs(.6))\rtest2[[1]]\r## [1] 0\rtest2[[2]]\r\r","date":1536710400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536710400,"objectID":"00d0df9d2af688523871eed083333651","permalink":"/post/correlation-doesn-t-even-imply-a-relationship-necessarily/","publishdate":"2018-09-12T00:00:00Z","relpermalink":"/post/correlation-doesn-t-even-imply-a-relationship-necessarily/","section":"post","summary":"There’s a problem with the various versions of the oft-heard-in-intro-stats-courses phrase “correlation does not imply causation.” It gives early statistics students the wrong impressions.\nThe idea seems simple: Just because there is statistical correlation in the data present does not mean that that there is a real world causal relationship (a complicated term, it turns out) between x and y. You know, x could have a high correlation with y but actually, w is simply a mutual cause of x and y.","tags":["Correlation","Causation","Methods"],"title":"Correlation Doesn't Even Imply ... Correlation, Necessarily","type":"post"},{"authors":null,"categories":null,"content":"\r\r\r\rtitle: “Explanatory IRT tutorial with the TAM package in R” output: html_document: default\r\rdate = 2018-09-09T00:00:00 # lastmod = 2018-09-09T00:00:00\r\rdraft = false # Is this a draft? true/false toc = true # Show table of contents? true/false type = “docs” # Do not modify.\r\r# Add menu entry to sidebar. [menu.tutorial] name = “Explanatory IRT” weight = 1 +++\r\r## Get the Data Read in First, I want to make sure everybody gets the data read into R in the exact same way.\r\r```r #install packages to get data #install.packages(“tidyverse”) #install.packages(“TAM”) #install.packages(“lme4”) #install.packages(“readr”) #install.packages(“optimx”) library(readr) library(tidyverse) library(lme4) library(TAM) library(optimx) library(knitr)\r\r#get the data read in. Have to be connected to internet. eirtdata \u0026lt;- read_csv(“https://raw.githubusercontent.com/danielbkatz/EIRT/master/eirtdata.csv”)\r\r#get rid of the extra column eirtdata \u0026lt;- eirtdata[-1]\r\r#optional, if you want to save the data as a csv file on your computer. #Note, it adds a column. #write.csv(eirtdata, “eirtdata.csv”)\r\r#make sure these person level covariates are treated as factors eirtdata \u0026lt;- eirtdata %\u0026gt;% mutate(treat = ifelse(treat==1, “treat”, “not-treat”)) eirtdata\\(treat \u0026lt;- as.factor(eirtdata\\)treat) eirtdata\\(proflevel \u0026lt;- as.factor(eirtdata\\)proflevel) eirtdata\\(abilcov \u0026lt;- as.factor(eirtdata\\)abilcov) ``` #1. The Data Once the data is read in, let’s describe the data set. The data set comes from a general test given to a set of first year undergrads at UCSB. The test was administered to 1500 students in a large biology class. Approximately half the students are in a class that is run the standard way. The other class involves an all together different curriculum. Therefore, there’s a treatment and control group.\r\r#2. The variables: 1. id: Random Student ID 2. Math... Math Question from the test scored correct or incorrect (1 or 0) 3. Science... Science type question scored correct or incorrect (1 or 0) 4. ELA... Reading Comprehension type question, science related scored correct or incorrect (1 or 0) 5. MathWordProb... Math Word Problem Type Question scored correct or incorrect (1 or 0) 6. treat: 1 if student was assigned to treatment class, 0 if assigned to standard class 7. proflevel: Categorical variable representing proficiency category on previous chemistry exam. 1 is the lowest, least proficient category. 4 is the most proficient. 8. abilcov: Whether student is a chemistry(3), molecular biology(2), or other (1) major. Categorical.\r\rThere are 40 items on the test in total.\r\rr #to get a sense of what's in the dataset. #names(tells us what the column names are) names(eirtdata)\r\r## [1] \u0026quot;id\u0026quot; \u0026quot;Math.1\u0026quot; \u0026quot;Math.2\u0026quot; ## [4] \u0026quot;Math.3\u0026quot; \u0026quot;Math.4\u0026quot; \u0026quot;Math.5\u0026quot; ## [7] \u0026quot;Math.6\u0026quot; \u0026quot;Math.7\u0026quot; \u0026quot;Math.8\u0026quot; ## [10] \u0026quot;Math.9\u0026quot; \u0026quot;Math.10\u0026quot; \u0026quot;Science.1\u0026quot; ## [13] \u0026quot;Science.2\u0026quot; \u0026quot;Science.3\u0026quot; \u0026quot;Science.4\u0026quot; ## [16] \u0026quot;Science.5\u0026quot; \u0026quot;Science.6\u0026quot; \u0026quot;Science.7\u0026quot; ## [19] \u0026quot;Science.8\u0026quot; \u0026quot;Science.9\u0026quot; \u0026quot;Science.10\u0026quot; ## [22] \u0026quot;ELA.1\u0026quot; \u0026quot;ELA.2\u0026quot; \u0026quot;ELA.3\u0026quot; ## [25] \u0026quot;ELA.4\u0026quot; \u0026quot;ELA.5\u0026quot; \u0026quot;ELA.6\u0026quot; ## [28] \u0026quot;ELA.7\u0026quot; \u0026quot;ELA.8\u0026quot; \u0026quot;ELA.9\u0026quot; ## [31] \u0026quot;ELA.10\u0026quot; \u0026quot;MathWordProb.1\u0026quot; \u0026quot;MathWordProb.2\u0026quot; ## [34] \u0026quot;MathWordProb.3\u0026quot; \u0026quot;MathWordProb.4\u0026quot; \u0026quot;MathWordProb.5\u0026quot; ## [37] \u0026quot;MathWordProb.6\u0026quot; \u0026quot;MathWordProb.7\u0026quot; \u0026quot;MathWordProb.8\u0026quot; ## [40] \u0026quot;MathWordProb.9\u0026quot; \u0026quot;MathWordProb.10\u0026quot; \u0026quot;treat\u0026quot; ## [43] \u0026quot;proflevel\u0026quot; \u0026quot;abilcov\u0026quot;\r\rNormally, it would be wise to look at descriptives. We’ll skip that since the emphasis is on fitting the models in TAM.\r\rr #just to check out the data, are there #high performing students in both treatment groups? table(eirtdata$treat, eirtdata$proflevel)\r\r## ## 1 2 3 4 ## not-treat 185 214 170 191 ## treat 193 169 211 167 # 3. Running the Rasch Model Let’s run some basic IRT using tam on this data. This should help us get an idea.\r\r```r #fit the first IRT model. Have to subset the data since it contains person covariates. mod1 \u0026lt;- tam.mml(eirtdata[2:40])\r\r###4. view fit statistics. #It’s a lot easier to interpret these models if the data fit well. #The data fits really well. #If there are any outliers or anything like that, it would be revealed here.\r\r#get item fit mod1fit \u0026lt;- tam.fit(mod1) ```\r\rr #item difficulties. Just show the first 10 items difficulties head(as.data.frame(mod1$xsi))\r\r## xsi se.xsi ## Math.1 -1.1901775 0.06170396 ## Math.2 -0.5384382 0.05552351 ## Math.3 0.2070387 0.05424712 ## Math.4 0.7624491 0.05714235 ## Math.5 0.8450950 0.05786723 ## Math.6 -0.1907538 0.05419563\r\rr #view the range of fit statistics, particularly infit range(mod1fit$itemfit$Infit)\r\r## [1] 0.9622184 1.0289589\r\rr #Get the sample size adjusted acceptable item fit range: 2* (2/sqrt(1500))\r\r## [1] 0.1032796\r\rThe smalles infit value is .96, the larges it 1.03. Therefore, items are fitting pretty well, though, a few wouldn’t meet the acceptable standard based on certain fit criteria.\r\rThis is all to say, we’re good to start running our latent regressions.\r\r#4. Latent Regression in Two Parts Example Q1. Is there a noticable difference in general ability (based on the test we’re analyzing) between groups who were in the treatment group (coded as 1) and those who were not (coded as 0)?\r\rOne of the advantages of the latent regression approach is that it gets you item and student level information, potentially, and takes measurement error into account. If you were to simply regress test total score on the group identifier, you would have no measurement error. Plus, this regression approach wouldn’t really be a latent variable model. It takes the observed score and regresses it on the observed student classification.\r\r##Part I. Two Ways to Analyze Group Differences in TAM Treat the “treat” variable as placing students in groups, 1 and 0. We can do this two ways in TAM.\r\rFormula for latent regression: \\(\\theta = \\beta_1*X_1 + \\epsilon\\) where \\(\\beta_1\\) is the regression coefficient for 1. \\(X_1\\) takes on a value of 1 if the student is in the treatment group. Error is basically person specific (though, drawn from a normal distribution).\r\rWith a dichotomous treatment variable, there are a few ways to do this in TAM. The first treats the data as if it comes from two “groups.” This method gets us group variances. So for instance, we can not only see if the two groups have major differeces via their theta estimates, we can see if their underlying distributions have different “shapes”\r\r```r #take the treatment variable and make it its own R object treat \u0026lt;- eirtdata$treat\r\r#add a simple TAM command latg \u0026lt;- tam.mml(eirtdata[2:40], group = treat)\r\rsummary(latg) ```\r\rUnder the section, “covariances, variances” we see that the two groups have pretty similar distributions.\r\r```r #the next way, and I find this to be the most intuitive way, #but you don’t get group variances. #You have to specify a formula: formulay1 \u0026lt;- ~treat\r\r#and then add dataY which can have many columns. lat1 \u0026lt;- tam.mml(eirtdata[2:40], dataY = eirtdata$treat, formulaY = formulay1)\r\r#unfortunately, as far as I can tell, #this is the only way to get standard errors in TAM for your regression coefficients. se\u0026lt;- tam.se(lat1) summary(lat1) ```\r\rr # get the unstandardized regression coefficient. #You can save these in an object if you like. #get standardized regression coefficients (using yx) kable(lat1$latreg_stand$beta_stand)\r\rparm dim est StdYX StdX StdY\r\r\r\rIntercept 1 0.0000000 NA NA NA Y1 1 0.6989754 0.547852 0.3495732 1.095436\n#get R^2 estimate\rlat1$latreg_stand$R2_theta\r## [1] 0.3001418\r#get standard error\rse$beta\r## est.Dim1 se.Dim1\r## 1 0.0000000 0.00000000\r## 2 0.6989754 0.02448985\rWe can see that the latent regression explains about 30% of the variance in theta estimates (the rest going to person ability and error).\n#Let\u0026#39;s check standard errors of the regression estimates. se$beta\r## est.Dim1 se.Dim1\r## 1 0.0000000 0.00000000\r## 2 0.6989754 0.02448985\r#note, this also works below, but gets slightly different estimates #(a group mean is not held to zero)\r#like \u0026lt;- IRT.likelihood(lat1)\r#latregcom \u0026lt;- tam.latreg(like, dataY = eirtdata$treat, formulaY = formulay1)\r#Let\u0026#39;s compare person ability parameters between the standard Rasch model and the latent regression model. head(mod1$person)\r## pid case pweight score max EAP SD.EAP\r## 1 1 1 1 23 39 0.05383554 0.3182850\r## 2 2 2 1 26 39 0.39026644 0.3432272\r## 3 3 3 1 16 39 -0.67112535 0.3122953\r## 4 4 4 1 20 39 -0.25948566 0.3351358\r## 5 5 5 1 19 39 -0.37144597 0.3318124\r## 6 6 6 1 20 39 -0.25948566 0.3351358\r#theta estimates head(lat1$person)\r## pid case pweight score max EAP SD.EAP\r## 1 1 1 1 23 39 0.523588646 0.3041857\r## 2 2 2 1 26 39 0.807582572 0.3265364\r## 3 3 3 1 16 39 -0.388009891 0.3182653\r## 4 4 4 1 20 39 -0.004515606 0.2869874\r## 5 5 5 1 19 39 0.119659588 0.3024843\r## 6 6 6 1 20 39 -0.004515606 0.2869874\rAs we can see, the person parameters, the EAP estimates are quite different after “adjusting for” a student being in the treatment group or the non-treatment group. The formula now looks like:\n\\(Log[Pr(X=1|\\theta_p, \\delta_i)] = \\beta_1*treat + \\theta - \\delta_i\\).\nIn this model, the variable, treat is often called a “fixed effect.” TAM constrains the model so that the reference category fixed effect (no treatment) 0, has a value of zero. So, the model, for person 1, (who was in the treatment group) and item 1, looks like this:\nFixed effect of treat = .70 logits (rounded)\rStudent was in the “treatment group” = 1\r.51 logits is the student’s ability after adjusting for the student being in the treatment group.\rItem difficulty for item 1 is -.85 logits.\r\r\\(Logit[Pr(X=1|\\theta_1, \\delta_1)] = .70*1+ .51 - (-.85)*1 + \\epsilon\\).\nWe’ve decomposed the variance of theta.\nPart II.Adding to the Latent Regression model\rWe can make the latent regression model more complicated by adding predictors beyond just treatment/not-treatment. 1. Create a matrix of covariates. 2. Create a latent regression formula object for formulaY1 3. Run the model.\nWe’ll make the model more complicated by predicting theta with a latent regression controlling for proficiency level.\nSo the model is now: \\(\\theta = \\beta_1*treat + \\beta_2*proflevel + \\epsilon\\)\nAnd the full model will now look something like: \\(Log[Pr(X=1|\\theta_p, \\delta_i)] = \\beta_1*treat + \\beta_2*proflevel + \\theta - \\delta_i\\).\n#this gets all the person level covariates into a single dataframe\rdaty \u0026lt;- eirtdata %\u0026gt;% select(treat, proflevel, abilcov)\r#create the latent regression formula. Could also add an interaction\rformulay2 \u0026lt;- ~ treat + proflevel\r#now run the model\rlatreg2 \u0026lt;- tam.mml(eirtdata[2:40], dataY = daty, formulaY = formulay2)\r#get standard errors\rselatreg2 \u0026lt;- tam.se(latreg2)\r#view latent regression coefficients\rkable(latreg2$latreg_stand$beta_stand)\r\r\rparm\rdim\rest\rStdYX\rStdX\rStdY\r\r\r\rIntercept\r1\r0.0\rNA\rNA\rNA\r\rtreattreat\r1\r0.6\r0.5885051\r0.3000734\r1.176722\r\rproflevel2\r1\r0.6\r0.5132791\r0.2617163\r1.176722\r\rproflevel3\r1\r0.6\r0.5123953\r0.2612657\r1.176722\r\rproflevel4\r1\r1.2\r1.0035342\r0.5116929\r2.353445\r\r\r\r#view standard errors\rkable(selatreg2$beta)\r\r\rest.Dim1\rse.Dim1\r\r\r\r0.0\r0.0000000\r\r0.6\r0.0011625\r\r0.6\r0.0016158\r\r0.6\r0.0016201\r\r1.2\r0.0016713\r\r\r\rNote all estiimates are statistically significant. The last step in this section is comparing overall model fit.\ncomparemod \u0026lt;- CDM::IRT.compareModels(mod1, lat1, latreg2)\rkable(comparemod$IC)\r\r\rModel\rloglike\rDeviance\rNpars\rNobs\rAIC\rBIC\rAIC3\rAICc\rCAIC\r\r\r\rmod1\r-31109.02\r62218.04\r40\r1500\r62298.04\r62510.57\r62338.04\r62300.29\r62550.57\r\rlat1\r-30923.31\r61846.63\r41\r1500\r61928.63\r62146.47\r61969.63\r61930.99\r62187.47\r\rlatreg2\r-27663.39\r55326.77\r44\r1500\r55414.77\r55648.55\r55458.77\r55417.49\r55692.55\r\r\r\r\r5. The Item Side: The Linear Logistic Test Model (LLTM)\rThe LLTM is simply a more parsimonious Rasch model. Instead of each individual item being estimated, estimated item difficulties are made just based on item indicators. For instance, the data we have has four item types. Each item type gets its own difficulty estimate. However, there are some complications here. There is an assumption that each item indicator is responsible for the item difficulty. This is not a safe assumption.\nThe other unfortunate part about this is that the simplest way to go about fitting this model is by converting the data to “long” data. After that is done, we’ll create an indicator for each variable type (a categorical variable, denoting math, ela, science, or wordprob type item.\nTo make the data long, we’ll use the “gather” function from tidyr in the tidyverse package. Then we’ll add an indicator based on if_else statements.\n#change the name of the mathwordproblem items\rnames(eirtdata)[32:41] \u0026lt;- paste0(\u0026quot;WordProb.\u0026quot;, 1:10)\r#note the nested ifelse statements. #Basically, if each var contains a certain value, such as \u0026quot;Math,\u0026quot; #it gets recoded into its own column using \u0026quot;Mutate\u0026quot; from dplyr. eirtlong \u0026lt;- gather(eirtdata, key = \u0026quot;item\u0026quot;, value = \u0026quot;response\u0026quot;, Math.1:WordProb.10) %\u0026gt;%\rmutate(ittype = if_else(grepl(pattern = \u0026quot;Math.\u0026quot;, x = item), 1,\rif_else(grepl(pattern = \u0026quot;Science.\u0026quot;, x = item), 2,\rif_else(grepl(pattern = \u0026quot;ELA.\u0026quot;, x = item), 3,4))))\rhead(eirtlong)\r## # A tibble: 6 x 7\r## id treat proflevel abilcov item response ittype\r## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 treat 4 1 Math.1 1 1\r## 2 2 treat 3 2 Math.1 1 1\r## 3 3 not-treat 1 2 Math.1 1 1\r## 4 4 not-treat 2 1 Math.1 1 1\r## 5 5 treat 1 2 Math.1 0 1\r## 6 6 not-treat 2 1 Math.1 0 1\rTo set up the LLTM, we have to use TAM.mml.mfr using the facets formula. TAM will create so-called “pseudo facets” for parameters that don’t have estimates.\nformulaa \u0026lt;- ~ittype\rfacets \u0026lt;- as.data.frame(eirtlong[c(5,7)])\r#just to make it easier to call\rnames(facets) \u0026lt;- c(\u0026quot;item\u0026quot;, \u0026quot;ittype\u0026quot;)\r#only want to use the response column. Have to add an id column\rlltm \u0026lt;- tam.mml.mfr(eirtlong[6], facets = facets, formulaA = formulaa, pid = eirtlong$id)\rcontrol \u0026lt;- glmerControl(optimizer = \u0026quot;optimx\u0026quot;, calc.derivs = F, optCtrl = list(method=\u0026quot;nlminb\u0026quot;, starttests = F, kkt=F))\r#same thing but in lme4\rlltmme1 \u0026lt;- glmer(data=eirtlong, response~-1 + as.factor(ittype) + (1|id),\rfamily = \u0026quot;binomial\u0026quot;, control = control)\r#random item in lme4 (I don\u0026#39;t know how to do this in TAM)\rlltmlmer \u0026lt;- glmer(data=eirtlong, response~-1 + as.factor(ittype) + (1|id) + (1|item), family = \u0026quot;binomial\u0026quot;, control = control)\rOk, so the LLTM model fit in TAM will only give you “difficulties” for the particular item properties. Now, instead of conceptualizing the Rasch model as ability - item difficulty, the model is “ability - item property difficulty.” There will only be as many item properties as you specify. There can be “crossloadings.”\n#get property difficulties\rkable(lltm$xsi.facets)\r\r\rparameter\rfacet\rxsi\rse.xsi\r\r\r\rittype1\rittype\r-0.1092315\r0.0167853\r\rittype2\rittype\r0.0063631\r0.0167639\r\rittype3\rittype\r-1.2873576\r0.0198834\r\rittype4\rittype\r0.0249119\r0.0167649\r\rpsfPF101\rpsf\r0.0000000\r0.0000000\r\rpsfPF102\rpsf\r0.0000000\r0.0000000\r\rpsfPF103\rpsf\r0.0000000\r0.0000000\r\rpsfPF104\rpsf\r0.0000000\r0.0000000\r\rpsfPF105\rpsf\r0.0000000\r0.0000000\r\rpsfPF106\rpsf\r0.0000000\r0.0000000\r\rpsfPF107\rpsf\r0.0000000\r0.0000000\r\rpsfPF108\rpsf\r0.0000000\r0.0000000\r\rpsfPF109\rpsf\r0.0000000\r0.0000000\r\rpsfPF110\rpsf\r0.0000000\r0.0000000\r\r\r\rfixef(lltmme1)\r## as.factor(ittype)1 as.factor(ittype)2 as.factor(ittype)3 ## 0.109420105 -0.006163771 1.287211963 ## as.factor(ittype)4 ## -0.024710713\rFinally, let’s compare the overall fit of the models:\nkable(CDM::IRT.compareModels(mod1, lat1, latreg2, lltm)$IC)\r\r\rModel\rloglike\rDeviance\rNpars\rNobs\rAIC\rBIC\rAIC3\rAICc\rCAIC\r\r\r\rmod1\r-31109.02\r62218.04\r40\r1500\r62298.04\r62510.57\r62338.04\r62300.29\r62550.57\r\rlat1\r-30923.31\r61846.63\r41\r1500\r61928.63\r62146.47\r61969.63\r61930.99\r62187.47\r\rlatreg2\r-27663.39\r55326.77\r44\r1500\r55414.77\r55648.55\r55458.77\r55417.49\r55692.55\r\rlltm\r-38564.85\r77129.71\r5\r1500\r77139.71\r77166.27\r77144.71\r77139.75\r77171.27\r\r\r\rIt is perhaps of no surprise that the most complicated model has the best fit.\n\r","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"aa78a353167d61079a601a0fe7eb3b40","permalink":"/tutorial/explanatoryirt/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/tutorial/explanatoryirt/","section":"tutorial","summary":"title: “Explanatory IRT tutorial with the TAM package in R” output: html_document: default\r\rdate = 2018-09-09T00:00:00 # lastmod = 2018-09-09T00:00:00\r\rdraft = false # Is this a draft? true/false toc = true # Show table of contents? true/false type = “docs” # Do not modify.\r\r# Add menu entry to sidebar. [menu.tutorial] name = “Explanatory IRT” weight = 1 +++\r\r## Get the Data Read in First, I want to make sure everybody gets the data read into R in the exact same way.","tags":null,"title":"","type":"tutorial"},{"authors":null,"categories":["R"],"content":"\rGet the Data Read in\rFirst, I want to make sure everybody gets the data read into R in the exact same way.\n#install packages to get data\r#install.packages(\u0026quot;tidyverse\u0026quot;)\r#install.packages(\u0026quot;TAM\u0026quot;)\r#install.packages(\u0026quot;lme4\u0026quot;)\r#install.packages(\u0026quot;readr\u0026quot;)\r#install.packages(\u0026quot;optimx\u0026quot;)\rlibrary(readr)\rlibrary(tidyverse)\rlibrary(lme4)\rlibrary(TAM)\rlibrary(optimx)\rlibrary(knitr)\r#get the data read in. Have to be connected to internet. eirtdata \u0026lt;- read_csv(\u0026quot;https://raw.githubusercontent.com/danielbkatz/EIRT/master/eirtdata.csv\u0026quot;)\r#get rid of the extra column\reirtdata \u0026lt;- eirtdata[-1]\r#optional, if you want to save the data as a csv file on your computer. #Note, it adds a column.\r#write.csv(eirtdata, \u0026quot;eirtdata.csv\u0026quot;)\r#make sure these person level covariates are treated as factors\reirtdata \u0026lt;- eirtdata %\u0026gt;% mutate(treat = ifelse(treat==1, \u0026quot;treat\u0026quot;, \u0026quot;not-treat\u0026quot;))\reirtdata$treat \u0026lt;- as.factor(eirtdata$treat)\reirtdata$proflevel \u0026lt;- as.factor(eirtdata$proflevel)\reirtdata$abilcov \u0026lt;- as.factor(eirtdata$abilcov)\r\r1. The Data\rOnce the data is read in, let’s describe the data set.\nThe data set comes from a general test given to a set of first year undergrads at UCSB. The test was administered to 1500 students in a large biology class. Approximately half the students are in a class that is run the standard way. The other class involves an all together different curriculum. Therefore, there’s a treatment and control group.\n\r2. The variables:\rid: Random Student ID\n\rMath... Math Question from the test scored correct or incorrect (1 or 0)\n\rScience... Science type question scored correct or incorrect (1 or 0)\n\rELA... Reading Comprehension type question, science related scored correct or incorrect (1 or 0)\n\rMathWordProb... Math Word Problem Type Question scored correct or incorrect (1 or 0)\n\rtreat: 1 if student was assigned to treatment class, 0 if assigned to standard class\n\rproflevel: Categorical variable representing proficiency category on previous chemistry exam. 1 is the lowest, least proficient category. 4 is the most proficient.\n\rabilcov: Whether student is a chemistry(3), molecular biology(2), or other (1) major. Categorical.\r\rThere are 40 items on the test in total.\n#to get a sense of what\u0026#39;s in the dataset. #names(tells us what the column names are)\rnames(eirtdata)\r## [1] \u0026quot;id\u0026quot; \u0026quot;Math.1\u0026quot; \u0026quot;Math.2\u0026quot; ## [4] \u0026quot;Math.3\u0026quot; \u0026quot;Math.4\u0026quot; \u0026quot;Math.5\u0026quot; ## [7] \u0026quot;Math.6\u0026quot; \u0026quot;Math.7\u0026quot; \u0026quot;Math.8\u0026quot; ## [10] \u0026quot;Math.9\u0026quot; \u0026quot;Math.10\u0026quot; \u0026quot;Science.1\u0026quot; ## [13] \u0026quot;Science.2\u0026quot; \u0026quot;Science.3\u0026quot; \u0026quot;Science.4\u0026quot; ## [16] \u0026quot;Science.5\u0026quot; \u0026quot;Science.6\u0026quot; \u0026quot;Science.7\u0026quot; ## [19] \u0026quot;Science.8\u0026quot; \u0026quot;Science.9\u0026quot; \u0026quot;Science.10\u0026quot; ## [22] \u0026quot;ELA.1\u0026quot; \u0026quot;ELA.2\u0026quot; \u0026quot;ELA.3\u0026quot; ## [25] \u0026quot;ELA.4\u0026quot; \u0026quot;ELA.5\u0026quot; \u0026quot;ELA.6\u0026quot; ## [28] \u0026quot;ELA.7\u0026quot; \u0026quot;ELA.8\u0026quot; \u0026quot;ELA.9\u0026quot; ## [31] \u0026quot;ELA.10\u0026quot; \u0026quot;MathWordProb.1\u0026quot; \u0026quot;MathWordProb.2\u0026quot; ## [34] \u0026quot;MathWordProb.3\u0026quot; \u0026quot;MathWordProb.4\u0026quot; \u0026quot;MathWordProb.5\u0026quot; ## [37] \u0026quot;MathWordProb.6\u0026quot; \u0026quot;MathWordProb.7\u0026quot; \u0026quot;MathWordProb.8\u0026quot; ## [40] \u0026quot;MathWordProb.9\u0026quot; \u0026quot;MathWordProb.10\u0026quot; \u0026quot;treat\u0026quot; ## [43] \u0026quot;proflevel\u0026quot; \u0026quot;abilcov\u0026quot;\rNormally, it would be wise to look at descriptives. We’ll skip that since the emphasis is on fitting the models in TAM.\n#just to check out the data, are there #high performing students in both treatment groups? table(eirtdata$treat, eirtdata$proflevel)\r## ## 1 2 3 4\r## not-treat 185 214 170 191\r## treat 193 169 211 167\r\r3. Running the Rasch Model\rLet’s run some basic IRT using tam on this data. This should help us get an idea.\n#fit the first IRT model. Have to subset the data since it contains person covariates.\rmod1 \u0026lt;- tam.mml(eirtdata[2:40])\r###4. view fit statistics.\r#It\u0026#39;s a lot easier to interpret these models if the data fit well. #The data fits really well. #If there are any outliers or anything like that, it would be revealed here. #get item fit\rmod1fit \u0026lt;- tam.fit(mod1)\r#item difficulties. Just show the first 10 items difficulties\rhead(as.data.frame(mod1$xsi))\r## xsi se.xsi\r## Math.1 -1.1901775 0.06170396\r## Math.2 -0.5384382 0.05552351\r## Math.3 0.2070387 0.05424712\r## Math.4 0.7624491 0.05714235\r## Math.5 0.8450950 0.05786723\r## Math.6 -0.1907538 0.05419563\r#view the range of fit statistics, particularly infit\rrange(mod1fit$itemfit$Infit)\r## [1] 0.9610156 1.0291373\r#Get the sample size adjusted acceptable item fit range:\r2* (2/sqrt(1500))\r## [1] 0.1032796\rThe smalles infit value is .96, the larges it 1.03. Therefore, items are fitting pretty well, though, a few wouldn’t meet the acceptable standard based on certain fit criteria.\nThis is all to say, we’re good to start running our latent regressions.\n\r4. Latent Regression in Two Parts\rExample Q1. Is there a noticable difference in general ability (based on the test we’re analyzing) between groups who were in the treatment group (coded as 1) and those who were not (coded as 0)?\nOne of the advantages of the latent regression approach is that it gets you item and student level information, potentially, and takes measurement error into account. If you were to simply regress test total score on the group identifier, you would have no measurement error. Plus, this regression approach wouldn’t really be a latent variable model. It takes the observed score and regresses it on the observed student classification.\nPart I. Two Ways to Analyze Group Differences in TAM\rTreat the “treat” variable as placing students in groups, 1 and 0. We can do this two ways in TAM.\nFormula for latent regression: \\(\\theta = \\beta_1*X_1 + \\epsilon\\) where \\(\\beta_1\\) is the regression coefficient for 1. \\(X_1\\) takes on a value of 1 if the student is in the treatment group. Error is basically person specific (though, drawn from a normal distribution).\nWith a dichotomous treatment variable, there are a few ways to do this in TAM. The first treats the data as if it comes from two “groups.” This method gets us group variances. So for instance, we can not only see if the two groups have major differeces via their theta estimates, we can see if their underlying distributions have different “shapes”\n#take the treatment variable and make it its own R object\rtreat \u0026lt;- eirtdata$treat\r#add a simple TAM command\rlatg \u0026lt;- tam.mml(eirtdata[2:40], group = treat)\rsummary(latg)\rUnder the section, “covariances, variances” we see that the two groups have pretty similar distributions.\n#the next way, and I find this to be the most intuitive way, #but you don\u0026#39;t get group variances. #You have to specify a formula:\rformulay1 \u0026lt;- ~treat\r#and then add dataY which can have many columns.\rlat1 \u0026lt;- tam.mml(eirtdata[2:40], dataY = eirtdata$treat, formulaY = formulay1)\r#unfortunately, as far as I can tell, #this is the only way to get standard errors in TAM for your regression coefficients. se\u0026lt;- tam.se(lat1)\rsummary(lat1)\r# get the unstandardized regression coefficient. #You can save these in an object if you like.\r#get standardized regression coefficients (using yx)\rkable(lat1$latreg_stand$beta_stand)\r\r\rparm\rdim\rest\rStdYX\rStdX\rStdY\r\r\r\rIntercept\r1\r0.0000000\rNA\rNA\rNA\r\rY1\r1\r0.6989754\r0.547852\r0.3495732\r1.095436\r\r\r\r#get R^2 estimate\rlat1$latreg_stand$R2_theta\r## [1] 0.3001418\r#get standard error\rse$beta\r## est.Dim1 se.Dim1\r## 1 0.0000000 0.00000000\r## 2 0.6989754 0.02448985\rWe can see that the latent regression explains about 30% of the variance in theta estimates (the rest going to person ability and error).\n#Let\u0026#39;s check standard errors of the regression estimates. se$beta\r## est.Dim1 se.Dim1\r## 1 0.0000000 0.00000000\r## 2 0.6989754 0.02448985\r#note, this also works below, but gets slightly different estimates #(a group mean is not held to zero)\r#like \u0026lt;- IRT.likelihood(lat1)\r#latregcom \u0026lt;- tam.latreg(like, dataY = eirtdata$treat, formulaY = formulay1)\r#Let\u0026#39;s compare person ability parameters between the standard Rasch model and the latent regression model. head(mod1$person)\r## pid case pweight score max EAP SD.EAP\r## 1 1 1 1 23 39 0.05383554 0.3182850\r## 2 2 2 1 26 39 0.39026644 0.3432272\r## 3 3 3 1 16 39 -0.67112535 0.3122953\r## 4 4 4 1 20 39 -0.25948566 0.3351358\r## 5 5 5 1 19 39 -0.37144597 0.3318124\r## 6 6 6 1 20 39 -0.25948566 0.3351358\r#theta estimates head(lat1$person)\r## pid case pweight score max EAP SD.EAP\r## 1 1 1 1 23 39 0.523588646 0.3041857\r## 2 2 2 1 26 39 0.807582572 0.3265364\r## 3 3 3 1 16 39 -0.388009891 0.3182653\r## 4 4 4 1 20 39 -0.004515606 0.2869874\r## 5 5 5 1 19 39 0.119659588 0.3024843\r## 6 6 6 1 20 39 -0.004515606 0.2869874\rAs we can see, the person parameters, the EAP estimates are quite different after “adjusting for” a student being in the treatment group or the non-treatment group. The formula now looks like:\n\\(Log[Pr(X=1|\\theta_p, \\delta_i)] = \\beta_1*treat + \\theta - \\delta_i\\).\nIn this model, the variable, treat is often called a “fixed effect.” TAM constrains the model so that the reference category fixed effect (no treatment) 0, has a value of zero. So, the model, for person 1, (who was in the treatment group) and item 1, looks like this:\nFixed effect of treat = .70 logits (rounded)\rStudent was in the “treatment group” = 1\r.51 logits is the student’s ability after adjusting for the student being in the treatment group.\rItem difficulty for item 1 is -.85 logits.\r\r\\(Logit[Pr(X=1|\\theta_1, \\delta_1)] = .70*1+ .51 - (-.85)*1 + \\epsilon\\).\nWe’ve decomposed the variance of theta.\n\rPart II.Adding to the Latent Regression model\rWe can make the latent regression model more complicated by adding predictors beyond just treatment/not-treatment. 1. Create a matrix of covariates. 2. Create a latent regression formula object for formulaY1 3. Run the model.\nWe’ll make the model more complicated by predicting theta with a latent regression controlling for proficiency level.\nSo the model is now: \\(\\theta = \\beta_1*treat + \\beta_2*proflevel + \\epsilon\\)\nAnd the full model will now look something like: \\(Log[Pr(X=1|\\theta_p, \\delta_i)] = \\beta_1*treat + \\beta_2*proflevel + \\theta - \\delta_i\\).\n#this gets all the person level covariates into a single dataframe\rdaty \u0026lt;- eirtdata %\u0026gt;% select(treat, proflevel, abilcov)\r#create the latent regression formula. Could also add an interaction\rformulay2 \u0026lt;- ~ treat + proflevel\r#now run the model\rlatreg2 \u0026lt;- tam.mml(eirtdata[2:40], dataY = daty, formulaY = formulay2)\r#get standard errors\rselatreg2 \u0026lt;- tam.se(latreg2)\r#view latent regression coefficients\rkable(latreg2$latreg_stand$beta_stand)\r\r\rparm\rdim\rest\rStdYX\rStdX\rStdY\r\r\r\rIntercept\r1\r0.0\rNA\rNA\rNA\r\rtreattreat\r1\r0.6\r0.5885051\r0.3000734\r1.176722\r\rproflevel2\r1\r0.6\r0.5132791\r0.2617163\r1.176722\r\rproflevel3\r1\r0.6\r0.5123953\r0.2612657\r1.176722\r\rproflevel4\r1\r1.2\r1.0035342\r0.5116929\r2.353445\r\r\r\r#view standard errors\rkable(selatreg2$beta)\r\r\rest.Dim1\rse.Dim1\r\r\r\r0.0\r0.0000000\r\r0.6\r0.0011625\r\r0.6\r0.0016158\r\r0.6\r0.0016201\r\r1.2\r0.0016713\r\r\r\rNote all estiimates are statistically significant. The last step in this section is comparing overall model fit.\ncomparemod \u0026lt;- CDM::IRT.compareModels(mod1, lat1, latreg2)\rkable(comparemod$IC)\r\r\rModel\rloglike\rDeviance\rNpars\rNobs\rAIC\rBIC\rAIC3\rAICc\rCAIC\r\r\r\rmod1\r-31109.02\r62218.04\r40\r1500\r62298.04\r62510.57\r62338.04\r62300.29\r62550.57\r\rlat1\r-30923.31\r61846.63\r41\r1500\r61928.63\r62146.47\r61969.63\r61930.99\r62187.47\r\rlatreg2\r-27663.39\r55326.77\r44\r1500\r55414.77\r55648.55\r55458.77\r55417.49\r55692.55\r\r\r\r\r\r5. The Item Side: The Linear Logistic Test Model (LLTM)\rThe LLTM is simply a more parsimonious Rasch model. Instead of each individual item being estimated, estimated item difficulties are made just based on item indicators. For instance, the data we have has four item types. Each item type gets its own difficulty estimate. However, there are some complications here. There is an assumption that each item indicator is responsible for the item difficulty. This is not a safe assumption.\nThe other unfortunate part about this is that the simplest way to go about fitting this model is by converting the data to “long” data. After that is done, we’ll create an indicator for each variable type (a categorical variable, denoting math, ela, science, or wordprob type item.\nTo make the data long, we’ll use the “gather” function from tidyr in the tidyverse package. Then we’ll add an indicator based on if_else statements.\n#change the name of the mathwordproblem items\rnames(eirtdata)[32:41] \u0026lt;- paste0(\u0026quot;WordProb.\u0026quot;, 1:10)\r#note the nested ifelse statements. #Basically, if each var contains a certain value, such as \u0026quot;Math,\u0026quot; #it gets recoded into its own column using \u0026quot;Mutate\u0026quot; from dplyr. eirtlong \u0026lt;- gather(eirtdata, key = \u0026quot;item\u0026quot;, value = \u0026quot;response\u0026quot;, Math.1:WordProb.10) %\u0026gt;%\rmutate(ittype = if_else(grepl(pattern = \u0026quot;Math.\u0026quot;, x = item), 1,\rif_else(grepl(pattern = \u0026quot;Science.\u0026quot;, x = item), 2,\rif_else(grepl(pattern = \u0026quot;ELA.\u0026quot;, x = item), 3,4))))\rhead(eirtlong)\r## # A tibble: 6 x 7\r## id treat proflevel abilcov item response ittype\r## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 treat 4 1 Math.1 1 1\r## 2 2 treat 3 2 Math.1 1 1\r## 3 3 not-treat 1 2 Math.1 1 1\r## 4 4 not-treat 2 1 Math.1 1 1\r## 5 5 treat 1 2 Math.1 0 1\r## 6 6 not-treat 2 1 Math.1 0 1\rTo set up the LLTM, we have to use TAM.mml.mfr using the facets formula. TAM will create so-called “pseudo facets” for parameters that don’t have estimates.\nformulaa \u0026lt;- ~ittype\rfacets \u0026lt;- as.data.frame(eirtlong[c(5,7)])\r#just to make it easier to call\rnames(facets) \u0026lt;- c(\u0026quot;item\u0026quot;, \u0026quot;ittype\u0026quot;)\r#only want to use the response column. Have to add an id column\rlltm \u0026lt;- tam.mml.mfr(eirtlong[6], facets = facets, formulaA = formulaa, pid = eirtlong$id)\rcontrol \u0026lt;- glmerControl(optimizer = \u0026quot;optimx\u0026quot;, calc.derivs = F, optCtrl = list(method=\u0026quot;nlminb\u0026quot;, starttests = F, kkt=F))\r#same thing but in lme4\rlltmme1 \u0026lt;- glmer(data=eirtlong, response~-1 + as.factor(ittype) + (1|id),\rfamily = \u0026quot;binomial\u0026quot;, control = control)\r#random item in lme4 (I don\u0026#39;t know how to do this in TAM)\rlltmlmer \u0026lt;- glmer(data=eirtlong, response~-1 + as.factor(ittype) + (1|id) + (1|item), family = \u0026quot;binomial\u0026quot;, control = control)\rOk, so the LLTM model fit in TAM will only give you “difficulties” for the particular item properties. Now, instead of conceptualizing the Rasch model as ability - item difficulty, the model is “ability - item property difficulty.” There will only be as many item properties as you specify. There can be “crossloadings.”\n#get property difficulties\rkable(lltm$xsi.facets)\r\r\rparameter\rfacet\rxsi\rse.xsi\r\r\r\rittype1\rittype\r-0.1092315\r0.0167853\r\rittype2\rittype\r0.0063631\r0.0167639\r\rittype3\rittype\r-1.2873576\r0.0198834\r\rittype4\rittype\r0.0249119\r0.0167649\r\rpsfPF101\rpsf\r0.0000000\r0.0000000\r\rpsfPF102\rpsf\r0.0000000\r0.0000000\r\rpsfPF103\rpsf\r0.0000000\r0.0000000\r\rpsfPF104\rpsf\r0.0000000\r0.0000000\r\rpsfPF105\rpsf\r0.0000000\r0.0000000\r\rpsfPF106\rpsf\r0.0000000\r0.0000000\r\rpsfPF107\rpsf\r0.0000000\r0.0000000\r\rpsfPF108\rpsf\r0.0000000\r0.0000000\r\rpsfPF109\rpsf\r0.0000000\r0.0000000\r\rpsfPF110\rpsf\r0.0000000\r0.0000000\r\r\r\rfixef(lltmme1)\r## as.factor(ittype)1 as.factor(ittype)2 as.factor(ittype)3 ## 0.109420105 -0.006163771 1.287211963 ## as.factor(ittype)4 ## -0.024710713\rFinally, let’s compare the overall fit of the models:\nkable(CDM::IRT.compareModels(mod1, lat1, latreg2, lltm)$IC)\r\r\rModel\rloglike\rDeviance\rNpars\rNobs\rAIC\rBIC\rAIC3\rAICc\rCAIC\r\r\r\rmod1\r-31109.02\r62218.04\r40\r1500\r62298.04\r62510.57\r62338.04\r62300.29\r62550.57\r\rlat1\r-30923.31\r61846.63\r41\r1500\r61928.63\r62146.47\r61969.63\r61930.99\r62187.47\r\rlatreg2\r-27663.39\r55326.77\r44\r1500\r55414.77\r55648.55\r55458.77\r55417.49\r55692.55\r\rlltm\r-38564.85\r77129.71\r5\r1500\r77139.71\r77166.27\r77144.71\r77139.75\r77171.27\r\r\r\rIt is perhaps of no surprise that the most complicated model has the best fit.\n\r","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cd821bd42d90e91ac7c801c62813b01f","permalink":"/post/explanatory-irt-tutorial-with-tam-r/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/explanatory-irt-tutorial-with-tam-r/","section":"post","summary":"Get the Data Read in\rFirst, I want to make sure everybody gets the data read into R in the exact same way.\n#install packages to get data\r#install.packages(\u0026quot;tidyverse\u0026quot;)\r#install.packages(\u0026quot;TAM\u0026quot;)\r#install.packages(\u0026quot;lme4\u0026quot;)\r#install.packages(\u0026quot;readr\u0026quot;)\r#install.packages(\u0026quot;optimx\u0026quot;)\rlibrary(readr)\rlibrary(tidyverse)\rlibrary(lme4)\rlibrary(TAM)\rlibrary(optimx)\rlibrary(knitr)\r#get the data read in. Have to be connected to internet. eirtdata \u0026lt;- read_csv(\u0026quot;https://raw.githubusercontent.com/danielbkatz/EIRT/master/eirtdata.csv\u0026quot;)\r#get rid of the extra column\reirtdata \u0026lt;- eirtdata[-1]\r#optional, if you want to save the data as a csv file on your computer.","tags":["Correlation","Causation","Methods","IRT","Rasch"],"title":"Explanatory IRT tutorial with the TAM package in R","type":"post"}]